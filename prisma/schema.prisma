// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int            @id @default(autoincrement())
  email             String
  passwordHash      String
  title             String
  firstName         String
  lastName          String
  acceptTerms       Boolean
  role              String
  verificationToken String?
  verified          DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  passwordReset     DateTime?
  created           DateTime       @default(now())
  updated           DateTime       @updatedAt
  isVerified        Boolean
  isActive          Boolean
  refreshTokens     RefreshToken[]

  Workflow Workflow[] @relation("CreatedBy")

  Request Request[] @relation("CreatedBy")

  Employee Employee[]
}

model RefreshToken {
  id              Int       @id @default(autoincrement())
  token           String?
  expires         DateTime?
  created         DateTime  @default(now())
  createdByIp     String?
  revoked         DateTime?
  revokedByIp     String?
  replacedByToken String?
  isExpired       Boolean?
  isActive        Boolean?
  account         Account   @relation(fields: [accountId], references: [id])
  accountId       Int
}

model Employee {
  id           Int         @id @default(autoincrement())
  employeeId   String      @unique
  account      Account?    @relation(fields: [userId], references: [id])
  userId       Int?
  position     String
  hireDate     DateTime
  status       String      @default("Active")
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  workflows    Workflow[]  @relation("EmployeeWorkflow")
  requests     Request[]   @relation("EmployeeRequest")
  created      DateTime    @default(now())
  updated      DateTime    @updatedAt
  isActive     Boolean     @default(true)
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  employees   Employee[]
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
}

model Workflow {
  id          Int       @id @default(autoincrement())
  employee    Employee? @relation("EmployeeWorkflow", fields: [employeeId], references: [id])
  employeeId  Int?
  type        String
  status      String    @default("Pending")
  details     Json?
  createdBy   Account?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById Int?
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
}

model Request {
  id          Int       @id @default(autoincrement())
  employee    Employee? @relation("EmployeeRequest", fields: [employeeId], references: [employeeId])
  employeeId  String?
  type        String
  status      String    @default("Pending")
  items       Json?
  createdBy   Account?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById Int?
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
}
